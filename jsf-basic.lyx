#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass ctex-book
\begin_preamble
\input{../writing-common/book-preamble.tex}
\end_preamble
\options openany
\use_default_options true
\begin_modules
theorems-bytype
theorems-chap-bytype
coderemarks
note-inset
tip-inset
warning-inset
logicalmkup
\end_modules
\maintain_unincluded_children false
\begin_local_layout
PackageOptions url hyphens
\end_local_layout
\language chinese-simplified
\language_package default
\inputencoding utf8-plain
\fontencoding global
\font_roman "default" "DejaVu Sans"
\font_sans "default" "DejaVu Serif"
\font_typewriter "default" "DejaVu Sans Mono"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts true
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format pdf4
\output_sync 0
\bibtex_command default
\index_command default
\float_placement tbph
\paperfontsize default
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 3
\pdf_breaklinks true
\pdf_pdfborder true
\pdf_colorlinks true
\pdf_backref false
\pdf_pdfusetitle true
\papersize default
\use_geometry false
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\boxbgcolor #d8daeb
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 2
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Chapter
JSF编程模型
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout


\backslash
epigraph{I am a slow walker, but I never walk backwards.}{Abraham Lincoln}
\end_layout

\end_inset


\end_layout

\begin_layout Section
JSF的概念
\end_layout

\begin_layout Subsection
JSF介绍
\end_layout

\begin_layout Standard
Java Server Faces (JSF) 是一种用于构建Java Web 应用程序的标准框架，基于将逻辑与表示分离的MVC模式架构，JSF规范定义了一组标
准UI组件，从而简化了Java服务器端应用程序的开发，并提供了用于开发组件的应用程序编程接口（API），JSF可以重用和扩展现有的标准UI组件。
\begin_inset CommandInset citation
LatexCommand cite
key "JSF-Overview"

\end_inset


\begin_inset Note Note
status collapsed

\begin_layout Plain Layout
仅仅作为文献引用的示例
\end_layout

\end_inset


\end_layout

\begin_layout Standard
事实上JSF是对已经存在的web应用程序框架的一种抽象，在JSF之前，servlet 和 JSP 是 web 应用程序开发中核心组件的主要部分，传统的交互是仅使
用Servlet和JSP组件开发的，通常是HTML浏览器的客户端向服务器发送请求。Web服务器接收请求，封装请求，然后使用客户端的各种参数值填充此请求对象，并将
其发送到Servlet（充当控制器）分析请求，然后与执行各种应用程序业务逻辑的Model（Java Beans）交互，然后选择向用户显示哪个视图。JSF隐藏了
 MVC-2体系结构的 View部分中大部分复杂内容。该框架不仅限于开发定制的用户界面组件，还支持各种高级功能，如事件处理机制，验证客户端发送的用户输入，页面导
航机制等.
\begin_inset CommandInset citation
LatexCommand cite
key "Introduction-JSF"

\end_inset


\end_layout

\begin_layout Subsection
JSF版本历史
\end_layout

\begin_layout Standard
JSF 2.2（2013-05-21） - 引入了新的概念，如无状态视图，页面流和创建便携式资源合同的能力。 
\end_layout

\begin_layout Standard
JSF 2.1（2010-11-22） - JSF 2.0的维护版本2。只有很小的规格变化。
\end_layout

\begin_layout Standard
JSF 2.0（2009-07-01） - 易于使用，增强的功能和性能的主要版本。符合Java EE 6。 
\end_layout

\begin_layout Standard
JSF 1.2（2006-05-11） - 对核心系统和API的许多改进。与Java EE 5兼容。初步采用Java EE。 
\end_layout

\begin_layout Standard
JSF 1.1（2004-05-27） - 修复版本。没有规格变化。
\end_layout

\begin_layout Standard
JSF 1.0（2004-03-11） - 发布初始规范。
\end_layout

\begin_layout Subsection
JSF优点
\end_layout

\begin_layout Standard
表示各种行为/属性的UI组件与其响应之间的耦合非常低，几乎没有。因此，HTML浏览器不是唯一的目标客户端应用程序。JSF应用程序在WML浏览器中仍旧运行良好
\end_layout

\begin_layout Standard
与JSF 1.x不同，所有内容都在faces-config.xml配置文件中声明，随着JSF 2.0的发布，开发人员可以使用注释声明导航，受管理的bean或CDI
 bean，从而使开发变得更加轻松快捷
\end_layout

\begin_layout Standard
JSF减少了创建和维护应用程序的工作，这些应用程序将在Java应用程序服务器上运行，并将应用程序UI呈现给目标客户端
\begin_inset CommandInset citation
LatexCommand cite
key "Introduction-JSF"

\end_inset


\end_layout

\begin_layout Section
JSF的生命周期
\end_layout

\begin_layout Standard
JSF使用一个控制器servlet来处理请求,然后执行 JSF 生命周期，所有JSF事件都在服务器上执行,当在JSF页面中提供一个事件处理程序时,就是告诉JSF
实现当服务器处理页面中的用于输入时,应在生命周期的适当位置处理相应的事件。
\end_layout

\begin_layout Subsection
还原视图阶段（Restore View Phase）
\end_layout

\begin_layout Standard
Faces视图是用户界面组件的服务器端树，还原视图阶段是在内存中恢复或创建代表客户端用户界面信息的服务器端组件树（视图），当请求JSF页面时，JSF开始此阶段。
\end_layout

\begin_layout Standard
在这个阶段JSF建立页面的视图，会有一个来自 FacesServlet 控制器的请求。控制器会对请求进行考查，并提取出视图的ID，使用这个视图ID来为当前的视图
查找组件，给视图中的组件设置事件处理器、校验器，在FacesContext
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
FacesContext 包含与单个 JavaServer Faces 请求的处理以及相应响应的呈现相关的所有每个请求的状态信息。它传递给请求处理生命周期的每个
阶段，并且可能被修改。FacesContext将视图保存在自己的 viewRoot属性中，所有应用程序的组件标签，事件处理程序，转换器和验证器都可以访问Face
sContext
\end_layout

\end_inset

中保存视图。如果对该页面的请求是初始请求，则JavaServerFaces创建一个空视图，并且生命周期进入到响应阶段，在此期间，空视图用页面中标记引用的组件填充
;如果该页面对应的视图已经存在，JavaServerFaces通过使用保存在客户端或服务器上的状态信息来还原视图。
\end_layout

\begin_layout Subsection
应用请求值阶段（Apply Request Values Phase）
\end_layout

\begin_layout Standard
应用请求值阶段的目的是让每个组件检索自己当前的状态信息，与JSF中转换器息息相关。在组件树重建后，每一个树上的组件用decode方法从请求中解出其新的值（通过F
acesContext对象进行检索或创建），然后将该值本地存储在组件上。如果值数据转换失败，产生与此组件相联系的错误，并入FacesContext的上下文，错误
信息在其后的显示应答阶段显示。
\end_layout

\begin_layout Standard
如果任何decode方法或者事件侦听器在当前FacesContext实例上调用renderResponse，会忽略生命周期的其他部分，直接跳转到呈现响应阶段。如
果应用程序需要重定向到其他Web应用程序或生成不包含任何JavaServer Faces组件的响应，则调用FacesContext.renderComplete方
法，完全略过生命周期的其他阶段。
\end_layout

\begin_layout Standard
如果页面上的一些组件有即时事件处理属性immediate="true"，那么验证，转换，以及与这些组件相关的事件将在这一阶段被处理，在此阶段结束时，所有组件已得
到新值，错误信息和事件已入队列。
\end_layout

\begin_layout Subsection
过程验证阶段（Process Validations Phase）
\end_layout

\begin_layout Standard
此阶段，JSF处理所有组件树上注册的校验器，检查指定验证规则
\begin_inset Foot
status collapsed

\begin_layout Plain Layout
这些验证规则可以是预先进行定义的（JSF 中提供的）,也可以由开发者进行定义
\end_layout

\end_inset

的组件属性，并将这些规则与为组件存储的本地值进行比较，如果值不合法JSF在FacesContext实例中加入错误信息，生命周期直接进入显示应答阶段，以便再次显示
页面并显示错误消息如果有转换错误也会显示。如果没有有效性验证错误，那么 JSF 就会转到更新模型值的阶段。
\end_layout

\begin_layout Standard
任何validate方法或事件监听器调在当前FacesContext实例上用renderResponse方法，JSF将直接跳到显示应答阶段。如果应用程序需要重定
向到其他Web应用程序或生成不包含任何JavaServerFaces组件的响应，则调用FacesContext.renderComplete方法，完全略过生命周期
的其他阶段。
\end_layout

\begin_layout Subsection
更新模型值阶段（Update Model Values Phase）
\end_layout

\begin_layout Standard
这个阶段发生在有效性验证之后,因此可以确保拷贝到bean属性的值都是有效的，在确定数据有效之后，遍历组件树，更新服务器端模型的实际值。JavaServerFac
es只更新输入组件的value属性指向的bean属性，通常来讲,是通过更新后台bean的属性实现的.只有那些与组件值绑定在一起的bean属性才会被更新。如果本地数
据无法转换为bean属性指定的类型，则生命周期将直接前进到呈现响应阶段。以便重新呈现页面并显示错误。这与验证错误发生的相似。
\end_layout

\begin_layout Standard
任何updateModels方法或任何监听器在当前FacesContext实例上用renderResponse方法，JSF将直接跳到显示应答阶段。如果应用程序需
要重定向到其他Web应用程序或生成不包含任何JavaServerFaces组件的响应，则调用FacesContext.renderComplete方法，完全略过生
命周期的其他阶段。
\end_layout

\begin_layout Subsection
调用应用程序阶段（Invoke Application Phase）
\end_layout

\begin_layout Standard
在此阶段，JavaServerFaces实现处理任何应用程序级事件，例如提交表单或链接到另一个页面。组件值已经经过了类型转换和有效性验证,并被应用到模型对象中，
因此可以使用它们来执行应用程序的业务逻辑了。
\end_layout

\begin_layout Standard
如果应用程序需要重定向到其他Web应用程序或生成不包含任何JavaServerFaces组件的响应，则可以调用FacesContext.responseCompl
ete。
\end_layout

\begin_layout Subsection
呈现响应阶段（Render Response Phase）
\end_layout

\begin_layout Standard
在视图中显示当前状态中的所有组件。在呈现视图的内容之后，保存响应的状态，以便后续请求可以访问它，并且它可用于还原视图阶段。
\end_layout

\begin_layout Standard
如果是返回请求，并且在应用请求值阶段，过程验证阶段或更新模型值阶段期间遇到错误，则在此阶段期间呈现原始页面。如果页面包含消息或消息标签，则页面上将显示错误消息。
\end_layout

\begin_layout Section
基本的JSF标签
\end_layout

\begin_layout Standard
JSF1.2有两个标签库，核心标签库和HTML标签库。对于JSF2.0来说，一共有6个标签库本章主要介绍HTML标签库。JSF提供了标准的标签库，可以搭配JSF组件
输出HTML文件，主要包括了几个类别：
\end_layout

\begin_layout Standard
输入：input...(以output作为开头，输出指定的讯息或绑定值)
\end_layout

\begin_layout Standard
输出：output...(以input作为开头，提供输入字段)、graphicImage
\end_layout

\begin_layout Standard
命令：commandButton、commandLink
\end_layout

\begin_layout Standard
GET请求：button、link、outputLink
\end_layout

\begin_layout Standard
选择：checkbox、listbox、menu、radio
\end_layout

\begin_layout Standard
HTML页面：head、body、form、outputStylesheet、outputScript
\end_layout

\begin_layout Standard
布局：panelGrid、panelGroup
\end_layout

\begin_layout Standard
数据表：dataTable、column
\end_layout

\begin_layout Standard
错误和消息：message、messages
\end_layout

\begin_layout Standard
JSF标准HTML标签共享三种类型标签特性：基本特性、HTML4.0特性（size、alt、width等属性）、DHTML事件（onchange、onclick等
等）。
\end_layout

\begin_layout Standard
基本特性如表所示：
\begin_inset CommandInset ref
LatexCommand ref
reference "基本HTML标签特性"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float table
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption Standard

\begin_layout Plain Layout
基本HTML标签特性
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "基本HTML标签特性"

\end_inset


\begin_inset Tabular
<lyxtabular version="3" rows="9" columns="3">
<features tabularvalignment="middle">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<column alignment="center" valignment="top">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
特性名称
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
适用范围
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
说明
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
所有组件
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
组件标识符
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
binding
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
所有组件
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
将该组件与backing bean属性绑定
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
rendered
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
所有组件
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
是否呈现组件（布尔类型）
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
输入、输出、命令组件
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
组件值：设置值或绑定到指定的值
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
valueChangeListener
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
输入组件
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
值变事件的处理者：反映值改变方法的方法表达式
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
converter
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
输入、输出组件
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
转换器类名
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
validator
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
输入组件
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
创建并连接到组件验证器的类名
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
required
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
输入组件
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
是否验证必填字段（布尔类型）
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
输入类标签
\end_layout

\begin_layout Standard
输入类标签包括了inputText、inputTextarea、inputSecret、 inputHidden
\end_layout

\begin_layout Itemize
inputText：单行文本输入控件
\begin_inset Newline newline
\end_inset

example:<h:inputText value="单行文本" readonly="true" style="..."/>(value值可以是值表达式)
\end_layout

\begin_layout Itemize
inputTextarea：多行文本输入控件
\begin_inset Newline newline
\end_inset

example：<h:inputTextarea value="多行文本..." rows="3" cols="5"/>(value值可以是值表达式)
\end_layout

\begin_layout Itemize
inputSecret:密码输入控件
\begin_inset Newline newline
\end_inset

example：<h:inputSecret value="#{user.password}" redisplay="true"/>
\end_layout

\begin_layout Itemize
inputHidden：隐藏字段，用于保留一些讯息于客户端，以在下一次发送窗体时一并送出
\end_layout

\begin_layout Subsection
输出类标签
\end_layout

\begin_layout Standard
输出类的标签包括了outputLabel、outputLink、outputFormat与 outputText
\end_layout

\begin_layout Itemize
outputLabel：便于访问其他组件的标签，使用for属性指定组件的client ID
\end_layout

\begin_layout Itemize
outputLink：到其他web站点的链接
\end_layout

\begin_layout Itemize
outputText:单行文本输出，简单的显示指定的值或绑定的值
\end_layout

\begin_layout Itemize
outputFormat：类似于outputText，可以搭配<f:param>来设定参数，格式化复合消息
\end_layout

\begin_layout Itemize
graphicImage：显示图像
\end_layout

\begin_layout Subsection
命令类标签
\end_layout

\begin_layout Standard
命令类标签包括commandButton与commandLink，其主要作用在于提供一个命令按钮或链接
\end_layout

\begin_layout Itemize
commandButton：提交、重置或者按下按钮。可以设定image属性，指定图片的URL
\end_layout

\begin_layout Itemize
commandLink：类似于按钮的链接
\end_layout

\begin_layout Subsection
选择类标签
\end_layout

\begin_layout Standard
选择类标签可以分为单选、复选、多选。按照外形又可以分为按钮、框、菜单。选择类标签包含以下几个
\end_layout

\begin_layout Itemize
selectOneRadio（单选按钮）、selectOneListbox（单选列表框）、selectOneMenu（单选菜单）：这三个为单选类的选择标签，只有
外观上的差异
\end_layout

\begin_layout Itemize
selectBooleanCheckbox（复选框）：value所绑定的属性必须接受与传回boolean型，如果是其它类型的对象，必须搭配转换器（Convert
er）进行字符串与对象之间的转换。
\end_layout

\begin_layout Itemize
selectManyCheckbox（复选框集）：value所绑定的属性必须是数组或集合（Collection）对象
\end_layout

\begin_layout Itemize
selectManyListbox（多选列表框）：value所绑定的属性必须是数组或集合（Collection）对象
\end_layout

\begin_layout Itemize
selectManyMenu（多选菜单）：value所绑定的属性必须是数组或集合（Collection）对象
\end_layout

\begin_layout Section
Hello, JSF！
\end_layout

\end_body
\end_document
